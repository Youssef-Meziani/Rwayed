{% extends 'base-sidebar.twig' %}

{% block title %} - Coupons{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    <!-- gridjs css -->
    <link rel="stylesheet" href="{{ asset('libs/gridjs/theme/mermaid.min.css') }}">

    <style>
        .delete-button {
            position: absolute;
            top: 5px;
            right: 5px;
            z-index: 1;
            background-color: rgba(255, 255, 255, 0.5);
            color: red;
            border: none;
            padding: 0;
            width: 24px;
            height: 24px;
            font-size: 16px;
            line-height: 1;
            cursor: pointer;
        }
    </style>
{% endblock %}

{% block content %}
    <div class="page-content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="row">
                                <div class="col-12 col-md-6">
                                    <h3 class="mb-0">Coupon Management</h3>
                                </div>
                                <div class="col-12 col-md-6 text-end">
                                    <button type="button" class="btn btn-success waves-effect" data-bs-toggle="modal" data-bs-target="#addCouponModal">Add Coupon</button>
                                </div>
                            </div>
                        </div>
                        <!-- Add Coupon Modal -->
                        <div class="modal fade" id="addCouponModal" tabindex="-1" role="dialog" aria-labelledby="addCouponModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        {{ form_start(couponForm, {'attr': {'id': 'addCouponForm'}}) }}
                                        <div class="mb-3">
                                            {{ form_label(couponForm.code) }}
                                            {{ form_widget(couponForm.code) }}
                                            <div class="invalid-feedback">{{ form_errors(couponForm.code) }}</div>
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(couponForm.description) }}
                                            {{ form_widget(couponForm.description) }}
                                            <div class="invalid-feedback">{{ form_errors(couponForm.description) }}</div>
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(couponForm.pourcentage) }}
                                            {{ form_widget(couponForm.pourcentage) }}
                                            <div class="invalid-feedback">{{ form_errors(couponForm.pourcentage) }}</div>
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(couponForm.dateExpiration) }}
                                            {{ form_widget(couponForm.dateExpiration) }}
                                            <div class="invalid-feedback">{{ form_errors(couponForm.dateExpiration) }}</div>
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(couponForm.status) }}
                                            {{ form_widget(couponForm.status) }}
                                            <div class="invalid-feedback">{{ form_errors(couponForm.status) }}</div>
                                        </div>
                                        <div id="formErrors"></div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                            <button type="submit" class="btn btn-primary">Save changes</button>
                                        </div>
                                        {{ form_end(couponForm) }}
                                    </div>
                                </div>
                            </div>
                        </div> <!-- Modal content should be defined in a separate Twig file -->
                        {% for message in app.flashes('success') %}
                            <div class="alert alert-success mx-4 my-2" role="alert">
                                {{ message }}
                            </div>
                        {% endfor %}
                        {% for error in app.flashes('error') %}
                            <div class="alert alert-danger mx-4 my-2" role="alert">
                                {{ error }}
                            </div>
                        {% endfor %}
                        <div class="card-body">
                            <div id="coupon-table-gridjs"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <!-- gridjs js -->
    <script src="{{ asset('libs/gridjs/gridjs.umd.js') }}"></script>
    <script>
        function loadCouponData() {
            new gridjs.Grid({
                search: true,
                sort: true,
                pagination: {
                    limit: 5
                },
                columns: ["Code", "Description", "Percentage", "Expiration Date", "Status", {
                    name: "Actions",
                    formatter: (_, row) => gridjs.html(`
                <a href="javascript:void(0);" id="delete_${row.cells[5].data}" class="px-2 text-danger delete-btn" data-id="${row.cells[5].data}" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete"><i class="bx bx-trash-alt font-size-18"></i></a>
                <a href="/coupon/edit/${row.cells[5].data}" class="px-2 text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit"><i class="bx bx-edit font-size-18"></i></a>

            `)
                }],
                server: {
                    url: '{{ path('fetch_coupons') }}',
                    then: data => data.map(coupon => [coupon.code, coupon.description, coupon.pourcentage + '%', coupon.dateExpiration, coupon.status, coupon.id])  // Include ID here but do not display it in columns
                }
            }).render(document.getElementById('coupon-table-gridjs'));
        }

        document.addEventListener('DOMContentLoaded', function() {
            loadCouponData();
            deleteCoupon();
            validationForm();
        });

        function validationForm() {
            const form = document.getElementById('addCouponForm');
            form.addEventListener('submit', function (event) {
                event.preventDefault();

                Swal.fire({
                    title: 'Please wait...',
                    text: 'Your request is being processed.',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                const formData = new FormData(form);
                fetch(form.action, {
                    method: form.method,
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        Swal.fire(
                            'Success!',
                            'Coupon has been added successfully.',
                            'success'
                        ).then(() => {
                            form.reset();
                            const modal = document.getElementById('addCouponModal');
                            const bootstrapModal = bootstrap.Modal.getInstance(modal);
                            if (bootstrapModal) {
                                bootstrapModal.hide(); // Hide the modal
                            }
                            location.reload(); // Reload the page to update the UI
                        });
                    } else {
                        Swal.close();  // Close the loading Swal
                        const errorContainer = document.getElementById('formErrors');
                        errorContainer.innerHTML = '';
                        for (const [field, errors] of Object.entries(data.errors)) {
                            const input = document.querySelector(`[name="code_promo[${field}]"]`);
                            if (input) {
                                input.classList.add('is-invalid');
                                const errorDiv = input.nextElementSibling;
                                if (errorDiv) {
                                    errorDiv.innerHTML = errors.join('<br>');
                                }
                            }
                        }
                    }
                }).catch(error => {
                    Swal.fire('Failed!', error.message, 'error');
                });
            });
        }


        function deleteCoupon() {
            document.addEventListener('click', function(event) {
                let target = event.target.closest('.delete-btn');
                if (!target) return;

                const couponId = target.getAttribute('data-id');
                if (!couponId) {
                    console.error('Coupon ID is undefined');
                    return;
                }

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        Swal.showLoading();  // Show loading indicator

                        // Manually hide the cancel button
                        Swal.getCancelButton().style.display = 'none';

                        return new Promise((resolve, reject) => {
                            const xhr = new XMLHttpRequest();
                            xhr.open("POST", `/delete-coupon/${couponId}`, true);
                            xhr.onload = () => {
                                if (xhr.status >= 200 && xhr.status < 300) {
                                    resolve(xhr.response);
                                } else {
                                    reject(new Error('Deletion failed: ' + xhr.statusText));
                                }
                            };
                            xhr.onerror = () => {
                                reject(new Error('Network error'));
                            };
                            xhr.send();
                        });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire(
                            'Deleted!',
                            'The coupon has been deleted successfully.',
                            'success'
                        ).then(() => {
                            location.reload();  // Reload the page to update the UI
                        });
                    }
                }).catch(error => {
                    Swal.fire('Failed!', error.message, 'error');
                }).finally(() => {
                    // Ensure the cancel button is hidden after the loading state
                    Swal.getCancelButton().style.display = 'none';
                });
            });
        }

    </script>
{% endblock %}
